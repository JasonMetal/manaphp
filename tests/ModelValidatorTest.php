<?php
namespace Tests;

use ManaPHP\Db\Adapter\Mysql;
use ManaPHP\Di\FactoryDefault;
use ManaPHP\Model\Validator;
use ManaPHP\Model\Validator\Exception as ValidatorException;
use Tests\Models\City;
use Tests\Models\Customer;
use Tests\Models\Payment;

class ModelValidatorTest extends \PHPUnit_Framework_TestCase
{
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $di = new FactoryDefault();

        $config = require __DIR__ . '/config.database.php';
        $di->setShared('db', new Mysql($config['mysql']));
    }

    public function test_required()
    {
        $validator = new Validator();

        $city = new City();

        $city->city = null;
        try {
            $validator->validate($city, ['city']);
            $this->fail('why not?');
        } catch (ValidatorException $e) {
        }

        $city->city = '';
        try {
            $validator->validate($city, ['city']);
            $this->fail('why not?');
        } catch (ValidatorException $e) {
        }

        $city->city = false;
        $validator->validate($city, ['city']);
        $this->assertFalse($city->city);

        $city->city = 'abc';
        $validator->validate($city, ['city']);
        $this->assertSame('abc', $city->city);
    }

    public function test_bool()
    {
        $validator = new Validator();

        $customer = new Customer();

        $customer->active = true;
        $validator->validate($customer, ['active']);
        $this->assertTrue($customer->active);

        $customer->active = '1';
        $validator->validate($customer, ['active']);
        $this->assertTrue($customer->active);

        $customer->city = 'active';
        $validator->validate($customer, ['active']);
        $this->assertTrue($customer->active);

        $customer->active = 'on';
        $validator->validate($customer, ['active']);
        $this->assertTrue($customer->active);

        $customer->active = false;
        $validator->validate($customer, ['active']);
        $this->assertFalse($customer->active);

        $customer->active = '0';
        $validator->validate($customer, ['active']);
        $this->assertFalse($customer->active);

        $customer->active = 'false';
        $validator->validate($customer, ['active']);
        $this->assertFalse($customer->active);

        $customer->active = 'off';
        $validator->validate($customer, ['active']);
        $this->assertFalse($customer->active);

        $customer->active = 'xxx';
        try {
            $validator->validate($customer, ['active']);
            $this->fail('why not?');
        } catch (ValidatorException $e) {
        }
    }

    public function test_int()
    {
        $validator = new Validator();

        $city = new City();

        $city->city_id = 100;
        $validator->validate($city, ['city_id']);
        $this->assertSame(100, $city->city_id);

        $city->city_id = '100';
        $validator->validate($city, ['city_id']);
        $this->assertSame(100, $city->city_id);

        $city->city_id = '-100';
        $validator->validate($city, ['city_id']);
        $this->assertSame(-100, $city->city_id);

        $city->city_id = '+100';
        $validator->validate($city, ['city_id']);
        $this->assertSame(100, $city->city_id);

        $city->city_id = 'xxx';
        try {
            $validator->validate($city, ['city_id']);
            $this->fail('why not?');
        } catch (ValidatorException $e) {
        }
    }

    public function test_float()
    {
        $validator = new Validator();

        $payment = new Payment();

        $payment->amount = 1.25;
        $validator->validate($payment, ['amount']);
        $this->assertSame(1.25, $payment->amount);

        $payment->amount = '1.25';
        $validator->validate($payment, ['amount']);
        $this->assertSame(1.25, $payment->amount);

        $payment->amount = '-1.25';
        $validator->validate($payment, ['amount']);
        $this->assertSame(-1.25, $payment->amount);

        $payment->amount = '+1.25';
        $validator->validate($payment, ['amount']);
        $this->assertSame(1.25, $payment->amount);

        $payment->amount = 'xxx';
        try {
            $validator->validate($payment, ['amount']);
            $this->fail('why not?');
        } catch (ValidatorException $e) {
        }
    }

    public function test_date()
    {
        $validator = new Validator();
        $ts = time();

        //timestamp
        $city = $this->createMock(City::class);
        $city->method('rules')->willReturn(['last_update' => 'date']);
        $city->method('getIntTypeFields')->willReturn(['last_update']);

        $city->last_update = $ts;
        $validator->validate($city, ['last_update']);
        $this->assertSame($ts, $city->last_update);

        $city->last_update = (string)$ts;
        $validator->validate($city, ['last_update']);
        $this->assertSame($ts, $city->last_update);

        $city->last_update = date('Y-m-d H:i:s', $ts);
        $validator->validate($city, ['last_update']);
        $this->assertSame($ts, $city->last_update);

        $city->last_update = strtotime('-10seconds', $ts);
        $validator->validate($city, ['last_update']);
        $this->assertSame($ts - 10, $city->last_update);

        //string
        $city = new City();

        $city->last_update = $ts;
        $validator->validate($city, ['last_update']);
        $this->assertEquals(date('Y-m-d H:i:s', $ts), $city->last_update);

        $city->last_update = (string)$ts;
        $validator->validate($city, ['last_update']);
        $this->assertEquals(date('Y-m-d H:i:s', $ts), $city->last_update);

        $city->last_update = date('Y-m-d H:i:s', $ts);
        $validator->validate($city, ['last_update']);
        $this->assertEquals(date('Y-m-d H:i:s', $ts), $city->last_update);

        $city->last_update = strtotime('-10seconds', $ts);
        $validator->validate($city, ['last_update']);
        $this->assertSame(date('Y-m-d H:i:s', $ts - 10), $city->last_update);

        //with format
        $city = $this->createMock(City::class);
        $city->method('rules')->willReturn(['last_update' => ['date' => 'Y-m-d']]);
        $city->method('getIntTypeFields')->willReturn([]);

        $city->last_update = date('Y-m-d H:i:s', $ts);
        $validator->validate($city, ['last_update']);
        $this->assertEquals(date('Y-m-d', $ts), $city->last_update);
    }

    public function test_range()
    {
        $validator = new Validator();

        $city = $this->createMock(City::class);
        $city->method('rules')->willReturn(['city_id' => ['range' => '3-100']]);

        $city->city_id = 0;
        try {
            $validator->validate($city, ['city_id']);
            $this->fail('why not?');
        } catch (ValidatorException $e) {

        }

        $city->city_id = 3;
        $validator->validate($city, ['city_id']);
        $this->assertSame(3, $city->city_id);

        $city->city_id = 10;
        $validator->validate($city, ['city_id']);
        $this->assertSame(10, $city->city_id);

        $city->city_id = 100;
        $validator->validate($city, ['city_id']);
        $this->assertSame(100, $city->city_id);

        $city->city_id = 101;
        try {
            $validator->validate($city, ['city_id']);
            $this->fail('why not?');
        } catch (ValidatorException $e) {

        }

        $city = $this->createMock(City::class);
        $city->city_id = -1;
        $city->method('rules')->willReturn(['city_id' => ['range' => '-10.0-100.13']]);
        $this->assertSame(-1, $city->city_id);

        $city = $this->createMock(City::class);
        $city->city_id = -11;
        $city->method('rules')->willReturn(['city_id' => ['range' => '-100--10']]);
        $this->assertSame(-11, $city->city_id);
    }

    public function test_min()
    {
        $validator = new Validator();

        $city = $this->createMock(City::class);
        $city->method('rules')->willReturn(['city_id' => ['min' => 10]]);

        $city->city_id = 0;
        try {
            $validator->validate($city, ['city_id']);
            $this->fail('why not?');
        } catch (ValidatorException $e) {

        }

        $city->city_id = 10;
        $validator->validate($city, ['city_id']);
        $this->assertSame(10, $city->city_id);
    }

    public function test_max()
    {
        $validator = new Validator();

        $city = $this->createMock(City::class);
        $city->method('rules')->willReturn(['city_id' => ['max' => 10]]);

        $city->city_id = 11;
        try {
            $validator->validate($city, ['city_id']);
            $this->fail('why not?');
        } catch (ValidatorException $e) {
        }

        $city->city_id = 10;
        $validator->validate($city, ['city_id']);
        $this->assertSame(10, $city->city_id);
    }

    public function test_length()
    {
        $validator = new Validator();

        $city = $this->createMock(City::class);
        $city->method('rules')->willReturn(['city' => ['length' => '3-100']]);

        $city->city = 'm';
        try {
            $validator->validate($city, ['city']);
            $this->fail('why not?');
        } catch (ValidatorException $e) {

        }

        $city->city = '123';
        $validator->validate($city, ['city']);
        $this->assertSame('123', $city->city);

        $city->city = 'manaphp';
        $validator->validate($city, ['city']);
        $this->assertSame('manaphp', $city->city);

        $city->city = str_repeat('a', 100);
        $validator->validate($city, ['city']);
        $this->assertSame(str_repeat('a', 100), $city->city);

        $city->city = str_repeat('a', 101);
        try {
            $validator->validate($city, ['city']);
            $this->fail('why not?');
        } catch (ValidatorException $e) {

        }
    }

    public function test_in()
    {
        $validator = new Validator();

        $city = $this->createMock(City::class);
        $city->method('rules')->willReturn(['city_id' => ['in' => '1,2,3']]);

        $city->city_id = 0;
        try {
            $validator->validate($city, ['city_id']);
            $this->fail('why not?');
        } catch (ValidatorException $e) {
        }

        $city->city_id = 1;
        $validator->validate($city, ['city_id']);
        $this->assertSame(1, $city->city_id);
    }

    public function test_not_in()
    {
        $validator = new Validator();

        $city = $this->createMock(City::class);
        $city->method('rules')->willReturn(['city_id' => ['not_in' => '1,2,3']]);

        $city->city_id = 1;
        try {
            $validator->validate($city, ['city_id']);
            $this->fail('why not?');
        } catch (ValidatorException $e) {
        }

        $city->city_id = 10;
        $validator->validate($city, ['city_id']);
        $this->assertSame(10, $city->city_id);
    }

    public function test_regex()
    {
        $validator = new Validator();

        $city = $this->createMock(City::class);
        $city->method('rules')->willReturn(['city' => ['regex' => '#\d+#']]);

        $city->city = 'abc';
        try {
            $validator->validate($city, ['city']);
            $this->fail('why not?');
        } catch (ValidatorException $e) {
        }

        $city->city = '10';
        $validator->validate($city, ['city']);
        $this->assertSame('10', $city->city);
    }

    public function test_alpha()
    {
        $validator = new Validator();

        $city = $this->createMock(City::class);
        $city->method('rules')->willReturn(['city' => 'alpha']);

        $city->city = 'a1v';
        try {
            $validator->validate($city, ['city']);
            $this->fail('why not?');
        } catch (ValidatorException $e) {
        }

        $city->city = 'abc';
        $validator->validate($city, ['city']);
        $this->assertSame('abc', $city->city);
    }

    public function test_digit()
    {
        $validator = new Validator();

        $city = $this->createMock(City::class);
        $city->method('rules')->willReturn(['city_id' => 'digit']);

        $city->city_id = 'abc';
        try {
            $validator->validate($city, ['city_id']);
            $this->fail('why not?');
        } catch (ValidatorException $e) {
        }

        $city->city_id = '123';
        $validator->validate($city, ['city_id']);
        $this->assertSame('123', $city->city_id);

        $city->city_id = 123;
        $validator->validate($city, ['city_id']);
        $this->assertSame(123, $city->city_id);
    }

    public function test_xdigit()
    {
        $validator = new Validator();

        $city = $this->createMock(City::class);
        $city->method('rules')->willReturn(['city_id' => 'xdigit']);

        $city->city_id = 'zzz';
        try {
            $validator->validate($city, ['city_id']);
            $this->fail('why not?');
        } catch (ValidatorException $e) {
        }

        $city->city_id = '123ABCDEF';
        $validator->validate($city, ['city_id']);
        $this->assertSame('123ABCDEF', $city->city_id);
    }

    public function test_alnum()
    {
        $validator = new Validator();

        $city = $this->createMock(City::class);
        $city->method('rules')->willReturn(['city' => 'alnum']);

        $city->city = '~`';
        try {
            $validator->validate($city, ['city']);
            $this->fail('why not?');
        } catch (ValidatorException $e) {
        }

        $city->city = 'abz1';
        $validator->validate($city, ['city']);
        $this->assertSame('abz1', $city->city);
    }

    public function test_email()
    {
        $validator = new Validator();

        $city = $this->createMock(City::class);
        $city->method('rules')->willReturn(['city' => 'email']);

        $city->city = 'abc';
        try {
            $validator->validate($city, ['city']);
            $this->fail('why not?');
        } catch (ValidatorException $e) {
        }

        $city->city = 'a@ss.com';
        $validator->validate($city, ['city']);
        $this->assertSame('a@ss.com', $city->city);
    }

    public function test_ext()
    {
        $validator = new Validator();

        $city = $this->createMock(City::class);
        $city->method('rules')->willReturn(['city' => ['ext' => 'jpg,png']]);

        $city->city = 'a.php';
        try {
            $validator->validate($city, ['city']);
            $this->fail('why not?');
        } catch (ValidatorException $e) {
        }

        $city->city = 'a.jpg';
        $validator->validate($city, ['city']);
        $this->assertSame('a.jpg', $city->city);

        $city->city = 'a.JPG';
        $validator->validate($city, ['city']);
        $this->assertSame('a.JPG', $city->city);
    }

    public function test_url()
    {
        $validator = new Validator();

        $city = $this->createMock(City::class);
        $city->method('rules')->willReturn(['city' => 'url']);

        $city->city = '~.com';
        try {
            $validator->validate($city, ['city']);
            $this->fail('why not?');
        } catch (ValidatorException $e) {
        }

        $city->city = 'http://test.com/x';
        $validator->validate($city, ['city']);
        $this->assertSame('http://test.com/x', $city->city);

        $city->city = 'test.com/x';
        $validator->validate($city, ['city']);
        $this->assertSame('http://test.com/x', $city->city);
    }

    public function test_ip()
    {
        $validator = new Validator();

        $city = $this->createMock(City::class);
        $city->method('rules')->willReturn(['city' => 'ip']);

        $city->city = '123';
        try {
            $validator->validate($city, ['city']);
            $this->fail('why not?');
        } catch (ValidatorException $e) {
        }

        $city->city = '1.2.3.4';
        $validator->validate($city, ['city']);
        $this->assertSame('1.2.3.4', $city->city);
    }

    public function test_escape()
    {
        $validator = new Validator();

        $city = $this->createMock(City::class);
        $city->method('rules')->willReturn(['city' => 'escape']);

        $city->city = '<>"\'&';
        $validator->validate($city, ['city']);
        $this->assertSame('&lt;&gt;&quot;\'&amp;', $city->city);
    }

    public function test_unique()
    {
        $validator = new Validator();

        $city = new City();

        $city->city = 'Abha';
        try {
            $validator->validate($city, ['city']);
            $this->fail('why not?');
        } catch (ValidatorException $e) {
        }

        $city->city = 'manaphp';
        $validator->validate($city, ['city']);
        $this->assertSame('manaphp', $city->city);
    }

    public function test_exists()
    {
        $validator = new Validator();

        $city = new City();

        $city->country_id = 999999;
        try {
            $validator->validate($city, ['country_id']);
            $this->fail('why not?');
        } catch (ValidatorException $e) {
        }

        $city->country_id = 2;
        $validator->validate($city, ['country_id']);
        $this->assertSame(2, $city->country_id);
    }
}