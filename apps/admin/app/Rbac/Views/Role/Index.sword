<div class="search-box">
    <el-row>
        <el-col :span="2">
            <el-input v-model="list.request.keyword" placeholder="keyword" size="small"
                      @keyup.enter.native="load_table_data"></el-input>
        </el-col>
        <el-col :span="3">
            <el-button round size="small" @click="load_table_data" icon="el-icon-search" type="primary">search
            </el-button>
            <el-button @click="createVisible=true" icon="el-icon-plus" size="small" type="primary">create</el-button>
        </el-col>
    </el-row>
</div>
<el-dialog title="create new role" :visible.sync="createVisible">
    <el-form :model="create" ref="create">
        <el-form-item label="role name:" prop="role_name">
            <el-input v-model="create.role_name" auto-complete="off"></el-input>
        </el-form-item>
        <el-form-item label="enabled:" prop="enabled">
            <el-switch v-model="create.enabled"></el-switch>
        </el-form-item>
    </el-form>
    <span slot="footer">
        <el-button type="primary" @click="do_create">create</el-button>
        <el-button @click="createVisible = false; $refs.create.resetFields()">cancel</el-button>
    </span>
</el-dialog>

<el-dialog title="edit role" :visible.sync="editVisible">
    <el-form :model="edit">
        <el-form-item label="role_name:">
            <el-input v-model="edit.role_name" auto-complete="off"></el-input>
        </el-form-item>
    </el-form>
    <div slot="footer">
        <el-button type="primary" @click="do_edit">save</el-button>
        <el-button @click="editVisible=false">cancel</el-button>
    </div>
</el-dialog>
<div class="result-box">
    <el-table :data="list.response.items" border size="small">
        <el-table-column type="index" label="#" width="50"></el-table-column>
        <el-table-column prop="role_id" label="role_id" width="100"></el-table-column>
        <el-table-column prop="role_name" label="role_name"></el-table-column>
        <el-table-column prop="enabled" :formatter="formatter_enabled" label="enabled" width="100"></el-table-column>
        <el-table-column prop="updated_time" label="updated_time" :formatter="formatter_date"
                         width="150"></el-table-column>
        <el-table-column prop="creator_id" label="creator_id" width="100"></el-table-column>
        <el-table-column prop="creator_name" label="creator_name" width="120"></el-table-column>
        <el-table-column prop="created_time" label="created_time" :formatter="formatter_date"
                         width="150"></el-table-column>
        <el-table-column fixed="right" label="operation" width="200">
            <template slot-scope="scope">
                <el-button @click="show_edit(scope.row)" icon="el-icon-edit" size="mini" plain round>
                    edit
                </el-button>
                <el-button v-if="scope.row.enabled" @click.native.prevent="do_disable(scope.row)" size="mini" plain
                           round>
                    disabled
                </el-button>
                <el-button v-if="!scope.row.enabled" @click.native.prevent="do_enable(scope.row)" size="mini" plain
                           round>
                    enabled
                </el-button>
            </template>
        </el-table-column>
    </el-table>
    <el-pagination @current-change="load_table_data" :current-page.sync="list.request.page"
                   :page-size="list.response.size"
                   :total="list.response.count" layout="total, prev, pager, next"></el-pagination>
</div>
@section('script')
    <script>

        vm = new Vue({
            el: '#app',
            data: {
                list: {
                    request: {},
                    response: []
                },
                createVisible: false,
                create: {
                    role_name: '',
                    enabled: true
                },

                editVisible: false,
                edit: {
                    role_id: '',
                    role_name: ''
                }
            },
            mounted: function () {
                this.load_table_data();
            },
            methods: {
                do_enable: function (row) {
                    this.$axios.post('@action(enable)', {role_id: row.role_id}).then(function (res) {
                        if (res.data.code === 0) {
                            row.enabled = 1;
                        } else {
                            this.$alert(res.data.message);
                        }
                    });
                },
                do_disable: function (row) {
                    this.$axios.post('@action(disable)', {role_id: row.role_id}).then(function (res) {
                        if (res.data.code === 0) {
                            row.enabled = 0;
                        } else {
                            this.$alert(res.data.message);
                        }
                    });
                },

                formatter_enabled: function (row, column, value) {
                    return ['disabled', 'enabled'][value];
                },
                do_create: function () {
                    this.$axios.post('@action(create)', this.create).then(function (res) {
                        if (res.data.code === 0) {
                            this.$refs.create.resetFields();
                            this.createVisible = false;
                            this.load_table_data();
                        } else {
                            this.$alert(res.data.message);
                        }
                    }.bind(this));
                },
                show_edit: function (row) {
                    this.edit.role_id = row.role_id;
                    this.edit.role_name = row.role_name;

                    this.editVisible = true;
                },
                do_edit: function () {
                    this.$axios.post('@action(edit)', this.edit).then(function (res) {
                        if (res.data.code === 0) {
                            this.editVisible = false;
                            this.load_table_data();
                        } else {
                            this.$alert(res.data.message);
                        }

                    }.bind(this));
                }
            }
        });
    </script>
@append